* Basic configuration
#+begin_src elisp
  (defvar my/temp-dir (concat user-emacs-directory "temp"))

  (use-package emacs ; builtin
    :config
    (blink-cursor-mode 0)
    (menu-bar-mode     0)
    (scroll-bar-mode   0)
    (tool-bar-mode     0)

    (global-auto-revert-mode      1)
    (global-hl-line-mode          1)
    (global-prettify-symbols-mode 1)

    (defalias 'yes-or-no-p 'y-or-n-p)

    (push '(alpha-background . 50) default-frame-alist)

    :custom
    (auto-save-file-name-transforms `((".*"  ,my/temp-dir t)))
    (auto-save-list-file-prefix               my/temp-dir)
    (backup-directory-alist         `(("." . ,my/temp-dir)))

    (c-basic-offset 4)
    (sgml-basic-offset 4)
    (tab-width 4)

    (inhibit-startup-screen t)
    (initial-scratch-message "")
    (native-comp-async-report-warnings-errors nil)
    (recentf-max-saved-items 100)
    (ring-bell-function 'ignore)
    (use-dialog-box nil))

  (use-package server ; builtin
    :custom (server-client-instructions nil))

  (use-package straight)
#+end_src

* Appearance
** 00 Theme
https://github.com/greduan/emacs-theme-gruvbox
#+begin_src elisp
  (use-package gruvbox-theme
    :custom (custom-safe-themes '("046a2b81d13afddae309930ef85d458c4f5d278a69448e5a5261a5c78598e012" default))
    :config (load-theme 'gruvbox-dark-medium))
#+end_src

** Better syntax highlighting
#+begin_src elisp
  ;; better syntax highlighting
  ;; (use-package tree-sitter
  ;;   :config (global-tree-sitter-mode 1)
  ;;   :hook (tree-sitter-after-on . tree-sitter-hl-mode))

  (use-package tree-sitter-langs)
#+end_src

** Colored parentheses
https://github.com/Fanael/rainbow-delimiters
#+begin_src elisp
  (use-package rainbow-delimiters
    :custom (rainbow-delimiters-max-face-count 6)
    :config
    (set-face-foreground 'rainbow-delimiters-depth-1-face "#cc241d")
    (set-face-foreground 'rainbow-delimiters-depth-2-face "#98971a")
    (set-face-foreground 'rainbow-delimiters-depth-3-face "#d79921")
    (set-face-foreground 'rainbow-delimiters-depth-4-face "#458588")
    (set-face-foreground 'rainbow-delimiters-depth-5-face "#b16286")
    (set-face-foreground 'rainbow-delimiters-depth-6-face "#689d6a")

    (define-globalized-minor-mode my/global-raindow-delims-mode rainbow-delimiters-mode
      (lambda () (rainbow-delimiters-mode 1)))
    (my/global-raindow-delims-mode 1))
#+end_src

** Colored strings
https://github.com/emacsmirror/rainbow-mode
#+begin_src elisp
  (use-package rainbow-mode
    :config
    (define-globalized-minor-mode my/global-rainbow-mode rainbow-mode
      (lambda () (rainbow-mode 1)))
    (my/global-rainbow-mode))
#+end_src

** Fill column
#+begin_src elisp
  (add-hook 'display-fill-column-indicator-mode-hook
            (lambda () (set-fill-column 80)))
  (global-display-fill-column-indicator-mode)
#+end_src

** Font
#+begin_src elisp
  (add-to-list 'default-frame-alist '(font . "monospace:size=14"))
#+end_src

** Git line status
https://github.com/emacsorphanage/git-gutter
#+begin_src elisp
  (use-package git-gutter
    :custom
    (git-gutter:added-sign    "+")
    (git-gutter:modified-sign "~")
    (git-gutter:deleted-sign  "-")
    (git-gutter:update-interval 2)
    :config
    (set-face-background 'git-gutter:added    nil)
    (set-face-background 'git-gutter:modified nil)
    (set-face-background 'git-gutter:deleted  nil)
    (global-git-gutter-mode 1))
#+end_src

** Icons
https://github.com/domtronn/all-the-icons.el
#+begin_src elisp
  (use-package all-the-icons
    :custom
    (all-the-icons-fonts-subdirectory "all-the-icons"))
#+end_src

** Indent guides
https://github.com/DarthFennec/highlight-indent-guides
#+begin_src elisp
  (use-package highlight-indent-guides
    :custom (highlight-indent-guides-responsive 'stack)
    :hook (prog-mode . highlight-indent-guides-mode))
#+end_src

** Line numbers
#+begin_src elisp
  (use-package display-line-numbers ; builtin
    :custom (display-line-numbers-type 'relative)
    :config
    (set-face-foreground 'line-number "#ebdbb2")
    (set-face-background 'line-number nil)
    (global-display-line-numbers-mode 1))
#+end_src

** Modeline
https://github.com/dbordak/telephone-line
#+begin_src elisp
  (use-package telephone-line
    :custom
    (telephone-line-lhs
     '((accent . (telephone-line-vc-segment
                  telephone-line-process-segment))
       (nil    . (telephone-line-project-segment
                  telephone-line-buffer-segment))))
    :config (telephone-line-mode 1))
#+end_src

** Tab bar
https://github.com/ema2159/centaur-tabs
#+begin_src elisp
  (use-package centaur-tabs
    :custom
    (centaur-tabs-cycle-scope 'tabs)
    (centaur-tabs-modified-marker "‚óè")
    (centaur-tabs-set-bar 'under)
    (centaur-tabs-show-new-tab-button nil)
    (centaur-tabs-set-close-button nil)
    (centaur-tabs-set-icons t)
    (centaur-tabs-set-modified-marker t)
    (centaur-tabs-style "bar")
    (x-underline-at-descent-line 1)
    :config
    (centaur-tabs-mode 1)
    (centaur-tabs-change-fonts "monospace" 100)
    (centaur-tabs-headline-match))
#+end_src

** Visible whitespace
#+begin_src elisp
  (use-package whitespace ; builtin
    :config (global-whitespace-mode 1)
    :custom (whitespace-style '(face tab-mark trailing missig-newline-at-eof)))
#+end_src

* Behaviour
** Automatic whitespace cleanup
#+begin_src elisp
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+end_src

** Direnv integration
https://github.com/wbolster/emacs-direnv
#+begin_src elisp
  (use-package direnv
    :config (direnv-mode 1)
    :custom (direnv-always-show-summary nil))
#+end_src

** Electricity
#+begin_src elisp
  (electric-indent-mode 1)
  (electric-pair-mode   1)
#+end_src

** Error checking
https://github.com/flycheck/flycheck
#+begin_src elisp
  (use-package flycheck
    :custom (flycheck-display-errors-delay 0)
    :config (global-flycheck-mode 1))
#+end_src

** Format on save
https://github.com/lassik/emacs-format-all-the-code
#+begin_src elisp
  (use-package format-all
    :hook (prog-mode . format-all-mode)
    (format-all-mode . format-all-ensure-formatter)
    :config
    (setq-default format-all-formatters '(("Haskell" stylish-haskell)
                                          ("HTML"    prettier))))
#+end_src

** Jump to characters
https://github.com/abo-abo/avy
#+begin_src elisp
  (use-package avy
    :custom
    (avy-keys
     (nconc
      (number-sequence ?a ?z)
      (number-sequence ?0 ?9))))
#+end_src

** Keyword highlighting
https://github.com/tarsius/hl-todo
#+begin_src elisp
  (use-package hl-todo :config (global-hl-todo-mode 1))
#+end_src

** Multiple cursors
https://github.com/magnars/multiple-cursors.el
#+begin_src elisp
  (use-package multiple-cursors)
#+end_src

** Popup control
#+begin_src elisp
  (use-package popwin
    :config
    ;;(push "*undo-tree*" popwin:special-display-config)
    ;;(push "*Help*"      popwin:special-display-config)
    (push "*Backtrace*" popwin:special-display-config)
    (push "*hoogle*"    popwin:special-display-config)
    (push '("^[*]" :regex t) popwin:special-display-config)
    (popwin-mode 1))
#+end_src

** Show composite keybindings
https://github.com/justbur/emacs-which-key
#+begin_src elisp
  (use-package which-key
    :custom
    (which-key-idle-delay 0.5)
    (which-key-idle-secondary-delay 0)
    :config
    (which-key-mode 1)
    (which-key-setup-side-window-bottom))
#+end_src

** Smooth scrolling
https://github.com/aspiers/smooth-scrolling
#+begin_src elisp
  (use-package smooth-scrolling
    :config (smooth-scrolling-mode 1))
#+end_src

** Snippets
#+begin_src elisp
  (use-package yasnippet :config (yas-global-mode 1))
#+end_src

** Undo tree
https://github.com/apchamberlain/undo-tree.el
#+begin_src elisp
  (use-package undo-tree
    :custom (undo-tree-history-directory-alist `(("." . ,my/temp-dir)))
    :config (global-undo-tree-mode 1))
#+end_src

** xref setup
#+begin_src elisp
  (setq xref-show-xrefs-function       #'consult-xref
        xref-show-definitions-function #'consult-xref
        xref-prompt-for-identifier     nil)
#+end_src

* Completion
** Candidate sorting
https://github.com/radian-software/prescient.el
#+begin_src elisp
  (use-package prescient :config (prescient-persist-mode 1))
  ;; (prescient-save-file (concat my/temp-dir "prescient-save.el"))
#+end_src

** Extra functions
https://github.com/minad/consult
#+begin_src elisp
  (use-package consult
    :init (recentf-mode 1)
    :custom (completion-in-region-function #'consult-completion-in-region)
    :config
    (require 'consult-imenu)
    (require 'consult-xref))
#+end_src

** Extra information
https://github.com/minad/marginalia
#+begin_src elisp
  (use-package marginalia :config (marginalia-mode 1))
#+end_src

** In-buffer completion IO
https://github.com/minad/corfu
#+begin_src elisp
  ;; (use-TODO-package corfu
  ;;   :custom
  ;;   (corfu-auto t)
  ;;   (corfu-auto-delay 0)
  ;;   (corfu-auto-prefix 1)
  ;;   :config (global-corfu-mode 1))

  ;; (use-TODO-package corfu-indexed) ; builtin

  ;; (use-TODO-package corfu-prescient :config (corfu-prescient-mode 1))
#+end_src

#+begin_src elisp
  (use-package company
    :hook (after-init . global-company-mode)
    :custom
    (company-dabbrev-downcase nil)
    (company-dabbrev-ignore-case t)
    (company-idle-delay 0)
    (company-minimum-prefix-length 1)
    (company-show-numbers t))
#+end_src

** LSP Client
#+begin_src elisp
  (use-package lsp-mode
	:custom
	(eldoc-idle-delay 0)
	(lsp-headerline-breadcrumb-enable nil)
	(lsp-idle-delay 0)
	(lsp-inlay-hint-enable t)
	(lsp-log-io nil)
	(read-process-output-max (* 1024 1024))
	:hook
	(c-mode          . lsp-deferred)
	(elixir-mode     . lsp-deferred)
	(gleam-mode      . lsp-deferred)
	(go-mode         . lsp-deferred)
	(haskell-mode    . lsp-deferred)
	(javascript-mode . lsp-deferred)
	(nix-mode        . lsp-deferred)
	(python-mode     . lsp-deferred)
	(typescript-mode . lsp-deferred)
	:config
	(require 'lsp-lens)
	(require 'lsp-modeline))

  (use-package lsp-ui
	:custom
	(lsp-ui-sideline-show-code-actions t)
	(lsp-ui-sideline-show-diagnostics t)
	(lsp-ui-sideline-show-hover nil)
	(lsp-ui-sideline-delay 0)
	(lsp-ui-doc-delay 0)
	(lsp-ui-doc-show-with-cursor t))
#+end_src

** Minibuffer completion UI
https://github.com/minad/vertico
#+begin_src elisp
  (use-package vertico
    :custom
    (vertico-count 30)
    (vertico-cycle t)
    :config (vertico-mode 1))

  (use-package vertico-prescient :config (vertico-prescient-mode 1))
#+end_src

* Languages
** Golang
- https://github.com/dominikh/go-mode.el
  #+begin_src elisp
    (use-package go-mode)
  #+end_src

** Haskell
#+begin_src elisp
  (use-package haskell-mode)
  (use-package lsp-haskell)
#+end_src

** Lisp
- https://github.com/Lindydancer/lisp-extra-font-lock
- https://github.com/justinbarclay/parinfer-rust-mode

#+begin_src elisp
  (put 'if 'lisp-indent-function 'defun) ; indent if normally

  (use-package lisp-extra-font-lock :config (lisp-extra-font-lock-global-mode 1))

  (use-package parinfer-rust-mode
    :hook emacs-lisp-mode
    :custom
    (parinfer-rust-library-directory my/temp-dir)
    (parinfer-rust-auto-download t))

  (add-hook
   'emacs-lisp-mode-hook
   #'(lambda ()
       (format-all-mode 0)
       (indent-tabs-mode 0)
       (electric-indent-local-mode 0)
       (electric-pair-local-mode 0)))
#+end_src

** Nix
https://github.com/NixOS/nix-mode
#+begin_src elisp
  (use-package nix-mode)
#+end_src

** YAML
#+begin_src elisp
  (use-package yaml-mode)
#+end_src

* Custom functions
** Bind multiple keys
#+begin_src elisp
  (defmacro my/bind-keys* (&rest body)
    "Globally bind all keys.
  BODY: a list of alternating key-function arguments."
    `(progn
       ,@(cl-loop
          while body collecting
          `(bind-key* ,(pop body) ,(pop body)))))
#+end_src

** Repeatably join a line
#+begin_src elisp
  (defun my/join-line ()
    (interactive)
    (join-line)
    (forward-line 1)
    (back-to-indentation))
#+end_src

** Smarter C-a
#+begin_src elisp
  (defun my/smart-home ()
    "Jump to beginning of line or first non-whitespace."
    (interactive)
    (let ((oldpos (point)))
      (back-to-indentation)
      (and (= oldpos (point)) (beginning-of-line))))
#+end_src

** Space-aware splitting
#+begin_src elisp
  (defun my/autosplit ()
    (interactive)
    (if (greaterthan 0 (- (* 8 (window-total-width)) (* 20 (window-total-height))))
      (my/split-switch-below)
      (my/split-switch-right)))
#+end_src

** Split and switch
#+begin_src elisp
  (defun my/split-switch-below ()
    "Split and switch to window below."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun my/split-switch-right ()
    "Split and switch to window on the right."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+end_src

* Keybinds
#+begin_src elisp
  (use-package bind-key) ; builtin
#+end_src

** Editing
#+begin_src elisp
  (my/bind-keys*
   "C-,"             #'mc/mark-previous-like-this
   "C-."             #'mc/mark-next-like-this
   "C-<tab>"         #'format-all-buffer
   "C-M-<backspace>" #'my/join-line
   "C-s"             #'save-buffer
   "C-y"             #'undo-tree-redo
   "C-z"             #'undo-tree-undo
   "M-v"             #'consult-yank-from-kill-ring)
#+end_src

** Help
#+begin_src elisp
  (my/bind-keys*
   "C-h C-b" #'describe-personal-keybindings
   "C-h C-f" #'describe-function
   "C-h C-k" #'describe-key
   "C-h C-m" #'consult-man
   "C-h C-v" #'describe-variable)
#+end_src

** LSP actions
#+begin_src elisp
  (my/bind-keys*
   "C-c C-a"     #'lsp-execute-code-action
   "C-c C-d"     #'lsp-ui-doc-focus-frame
   "C-c C-f C-d" #'xref-find-definitions
   "C-c C-f C-i" #'lsp-find-implementation
   "C-c C-f C-r" #'xref-find-references
   "C-c C-o"     #'lsp-organize-imports
   "C-c C-r"     #'lsp-rename)
#+end_src

** Menus
#+begin_src elisp
  (my/bind-keys*
   "C-x C-b" #'consult-bookmark
   "C-x C-f" #'find-file
   "C-x C-i" #'consult-imenu
   "C-x C-m" #'consult-minor-mode-menu
   "C-x C-o" #'consult-outline
   "C-x C-r" #'consult-ripgrep
   "C-x C-s" #'consult-buffer
   "C-x C-u" #'undo-tree-visualize)
#+end_src

** Movement
#+begin_src elisp
  (bind-key "C-a" #'my/smart-home)
  (my/bind-keys*
   "C-#"   (lambda () (interactive) (select-window (next-window)))
   "C-M-#" (lambda () (interactive) (select-window (previous-window)))
   "M-c"   #'avy-goto-char
   "M-e"   #'forward-word
   "M-f"   #'forward-to-word
   "M-l"   #'consult-goto-line
   "M-n"   #'scroll-up-command
   "M-p"   #'scroll-down-command
   "M-s"   #'consult-line)
#+end_src

** Other utilities
#+begin_src elisp
  (my/bind-keys*
   "C-M-i"   #'ispell-buffer
   "C-x C-a" #'mark-whole-buffer
   "C-x C-k" (lambda () (interactive) (kill-buffer (current-buffer))))
#+end_src

** Text scale adjustment
#+begin_src elisp
  (my/bind-keys*
   "C-+" #'text-scale-increase
   "C--" #'text-scale-decrease
   "C-=" #'text-scale-mode)
#+end_src

** Window management
#+begin_src elisp
  (my/bind-keys*
   "C-<next>"     #'centaur-tabs-forward
   "C-<prior>"    #'centaur-tabs-backward
   "C-M-<return>" #'my/autosplit
   "C-x C-0"      #'delete-window
   "C-x C-1"      #'delete-other-windows
   "C-x C-2"      #'my/split-switch-below
   "C-x C-3"      #'my/split-switch-right
   "C-x C-4"      #'kill-buffer-and-window)
#+end_src

* CUA
#+begin_src elisp
  (setq cua-remap-control-v nil)
  (cua-mode 1)
  (bind-key "C-v" #'cua-paste)
#+end_src

* Startup message
#+begin_src elisp
  (start-process
   "startup-notify" nil
   "notify-send" "emacs"
   (format "Startup took %s!" (emacs-init-time)))
#+end_src
