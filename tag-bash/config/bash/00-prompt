#!/usr/bin/env bash
   ANSI_RED="\[[38;5;1m\]"
 ANSI_GREEN="\[[38;5;2m\]"
ANSI_YELLOW="\[[38;5;3m\]"
  ANSI_BLUE="\[[38;5;4m\]"
ANSI_PURPLE="\[[38;5;5m\]"
  ANSI_CYAN="\[[38;5;6m\]"
 ANSI_WHITE="\[[38;5;7m\]"
  ANSI_BOLD="\[[1m\]"
 ANSI_RESET="\[[m\]"

local_ip() {
	ip r get 1.1 2>/dev/null | sed -En 's|.*src ([^ ]*).*|\1 |p'
}

git_repo() {
	git rev-parse --show-toplevel 2>/dev/null \
	| sed 's|.*/||g' | sed -E 's|^(.)| \1|g'
}

git_branch() {
	git branch 2>/dev/null | grep -E "^\*" | sed -E 's|^\* |:|g'
}

format_time() {
	local _time="$1"

	local _out=""
	local days="$((_time / 60 / 60 / 24 ))"
	local hours="$((_time / 60 / 60 % 24 ))"
	local minutes="$((_time / 60 % 60 ))"
	local seconds="$((_time % 60 ))"
	((days > 0 )) && _out="${days}d "
	((hours > 0 )) && _out="${_out}${hours}h "
	((minutes > 0 )) && _out="${_out}${minutes}m "
	_out="${_out}${seconds}s "
	printf "%s" "$_out"
}

_pre_command() {
	[[ "$BASH_COMMAND" =~ _.* ]] && return
	start_time="$(date "+%s")"
}

_after_command() {
	exit_status="$?"
	stop_time="$(date "+%s")"
	if [ -z "$start_time" ] || ((exit_status == 130)); then
		elapsed=""
	else
		elapsed="$(format_time "$((stop_time - start_time))")"
		start_time=""
	fi

	if [ -z "$HIDE" ]; then
		prompt_user="\u"
		prompt_host="\h"
	else
		prompt_user="Â¿Â¿Â¿"
		prompt_host="???"
	fi

PS1="\
${ANSI_BOLD}\
${ANSI_RED}[${exit_status} \
${ANSI_CYAN}${elapsed}\
${ANSI_YELLOW}$prompt_user${ANSI_GREEN}@${ANSI_BLUE}$prompt_host \
${ANSI_GREEN}$(local_ip)\
${ANSI_PURPLE}\w\
${ANSI_CYAN}$(git_repo)\
$(git_branch)\
${ANSI_RED}]\n${ANSI_WHITE}Î» \
${ANSI_RESET}\
"
}

trap "_pre_command" DEBUG
PROMPT_COMMAND=_after_command
